import React, { useState, useRef, useEffect } from 'react';
import {
  Box,
  Paper,
  Typography,
  TextField,
  IconButton,
  Avatar,
  List,
  ListItem,
  Chip,
  Menu,
  MenuItem,
  Divider,
} from '@mui/material';
import {
  Send as SendIcon,
  SmartToy as BotIcon,
  Person as PersonIcon,
  Settings as SettingsIcon,
} from '@mui/icons-material';
import ReactMarkdown from 'react-markdown';

interface Message {
  id: string;
  content: string;
  isUser: boolean;
  timestamp: Date;
  sources?: string[];
}

interface ConversationAreaProps {
  selectedDocumentId?: string | null;
}

// Mock conversation data
const mockMessages: Message[] = [
  {
    id: '1',
    content: 'Hello! I\'ve analyzed your document "Introduction to Machine Learning". Feel free to ask me any questions about its content.',
    isUser: false,
    timestamp: new Date(Date.now() - 60000),
    sources: ['Page 1'],
  },
  {
    id: '2',
    content: 'What are the main types of machine learning algorithms mentioned in the document?',
    isUser: true,
    timestamp: new Date(Date.now() - 30000),
  },
  {
    id: '3',
    content: 'Based on the document, there are three main types of machine learning algorithms:\n\n1. **Supervised Learning**: Uses labeled training data to learn input-output relationships\n2. **Unsupervised Learning**: Finds patterns in data without labeled examples\n3. **Reinforcement Learning**: Learns through interaction with an environment using rewards and penalties\n\nEach type has different applications and use cases depending on the problem you\'re trying to solve.',
    isUser: false,
    timestamp: new Date(Date.now() - 10000),
    sources: ['Page 3', 'Page 7', 'Page 12'],
  },
];

const ConversationArea: React.FC<ConversationAreaProps> = ({ selectedDocumentId }) => {
  const [messages, setMessages] = useState<Message[]>(mockMessages);
  const [inputMessage, setInputMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [selectedModel, setSelectedModel] = useState('GPT-4o');
  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const models = ['GPT-4o', 'Claude', 'Gemini'];

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const handleSendMessage = async () => {
    if (!inputMessage.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      content: inputMessage,
      isUser: true,
      timestamp: new Date(),
    };

    setMessages(prev => [...prev, userMessage]);
    setInputMessage('');
    setIsLoading(true);

    // Simulate AI response
    setTimeout(() => {
      const aiMessage: Message = {
        id: (Date.now() + 1).toString(),
        content: 'This is a simulated response. In the actual implementation, this would be generated by the selected AI model based on the document content.',
        isUser: false,
        timestamp: new Date(),
        sources: ['Page 5', 'Page 8'],
      };
      setMessages(prev => [...prev, aiMessage]);
      setIsLoading(false);
    }, 1500);
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const handleModelSelect = (model: string) => {
    setSelectedModel(model);
    setAnchorEl(null);
  };

  if (!selectedDocumentId) {
    return (
      <Box
        sx={{
          height: '100%',
          display: 'flex',
          flexDirection: 'column',
          alignItems: 'center',
          justifyContent: 'center',
          color: 'text.secondary',
          p: 4,
        }}
      >
        <BotIcon sx={{ fontSize: 64, mb: 2, opacity: 0.5 }} />
        <Typography variant="h6" gutterBottom>
          Select a Document to Start Chatting
        </Typography>
        <Typography variant="body2" align="center">
          Choose a document from the sidebar to begin your conversation.
        </Typography>
      </Box>
    );
  }

  return (
    <Box sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}>
      {/* Header */}
      <Paper
        elevation={1}
        sx={{
          p: 2,
          borderRadius: 0,
          borderBottom: '1px solid #e0e0e0',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'space-between',
        }}
      >
        <Box>
          <Typography variant="h6" sx={{ fontWeight: 500 }}>
            Introduction to Machine Learning
          </Typography>
          <Typography variant="caption" color="text.secondary">
            Ready for questions
          </Typography>
        </Box>
        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
          <Chip
            label={selectedModel}
            variant="outlined"
            onClick={(e) => setAnchorEl(e.currentTarget)}
            onDelete={() => setAnchorEl(document.body)}
            deleteIcon={<SettingsIcon />}
            sx={{ cursor: 'pointer' }}
          />
          <Menu
            anchorEl={anchorEl}
            open={Boolean(anchorEl)}
            onClose={() => setAnchorEl(null)}
          >
            {models.map((model) => (
              <MenuItem
                key={model}
                selected={model === selectedModel}
                onClick={() => handleModelSelect(model)}
              >
                {model}
              </MenuItem>
            ))}
          </Menu>
        </Box>
      </Paper>

      {/* Messages */}
      <Box sx={{ flexGrow: 1, overflow: 'auto', p: 1 }}>
        <List sx={{ pb: 0 }}>
          {messages.map((message) => (
            <ListItem key={message.id} sx={{ py: 1, px: 0, alignItems: 'flex-start' }}>
              <Box sx={{ display: 'flex', width: '100%', gap: 1 }}>
                <Avatar
                  sx={{
                    width: 32,
                    height: 32,
                    bgcolor: message.isUser ? '#1a73e8' : '#34a853',
                  }}
                >
                  {message.isUser ? <PersonIcon /> : <BotIcon />}
                </Avatar>
                <Box sx={{ flexGrow: 1, minWidth: 0 }}>
                  <Typography variant="caption" color="text.secondary" sx={{ mb: 0.5, display: 'block' }}>
                    {message.isUser ? 'You' : selectedModel} • {message.timestamp.toLocaleTimeString()}
                  </Typography>
                  <Paper
                    elevation={0}
                    sx={{
                      p: 2,
                      bgcolor: message.isUser ? '#f8f9fa' : '#fff',
                      border: '1px solid #e0e0e0',
                      borderRadius: 2,
                    }}
                  >
                    {message.isUser ? (
                      <Typography variant="body2">{message.content}</Typography>
                    ) : (
                      <ReactMarkdown>{message.content}</ReactMarkdown>
                    )}
                    {message.sources && (
                      <Box sx={{ mt: 1, display: 'flex', gap: 0.5, flexWrap: 'wrap' }}>
                        {message.sources.map((source, index) => (
                          <Chip
                            key={index}
                            label={source}
                            size="small"
                            variant="outlined"
                            sx={{ height: 20, fontSize: '0.7rem' }}
                          />
                        ))}
                      </Box>
                    )}
                  </Paper>
                </Box>
              </Box>
            </ListItem>
          ))}
          {isLoading && (
            <ListItem sx={{ py: 1, px: 0, alignItems: 'flex-start' }}>
              <Box sx={{ display: 'flex', width: '100%', gap: 1 }}>
                <Avatar sx={{ width: 32, height: 32, bgcolor: '#34a853' }}>
                  <BotIcon />
                </Avatar>
                <Box sx={{ flexGrow: 1 }}>
                  <Typography variant="caption" color="text.secondary" sx={{ mb: 0.5, display: 'block' }}>
                    {selectedModel} • typing...
                  </Typography>
                  <Paper
                    elevation={0}
                    sx={{
                      p: 2,
                      bgcolor: '#fff',
                      border: '1px solid #e0e0e0',
                      borderRadius: 2,
                    }}
                  >
                    <Typography variant="body2" color="text.secondary">
                      Thinking...
                    </Typography>
                  </Paper>
                </Box>
              </Box>
            </ListItem>
          )}
        </List>
        <div ref={messagesEndRef} />
      </Box>

      {/* Input Area */}
      <Paper
        elevation={1}
        sx={{
          p: 2,
          borderRadius: 0,
          borderTop: '1px solid #e0e0e0',
        }}
      >
        <Box sx={{ display: 'flex', gap: 1, alignItems: 'flex-end' }}>
          <TextField
            fullWidth
            multiline
            maxRows={4}
            variant="outlined"
            placeholder="Ask a question about your document..."
            value={inputMessage}
            onChange={(e) => setInputMessage(e.target.value)}
            onKeyPress={handleKeyPress}
            disabled={isLoading}
            sx={{
              '& .MuiOutlinedInput-root': {
                borderRadius: 2,
              },
            }}
          />
          <IconButton
            color="primary"
            onClick={handleSendMessage}
            disabled={!inputMessage.trim() || isLoading}
            sx={{
              bgcolor: '#1a73e8',
              color: 'white',
              '&:hover': {
                bgcolor: '#1557b0',
              },
              '&.Mui-disabled': {
                bgcolor: '#e0e0e0',
                color: '#999',
              },
            }}
          >
            <SendIcon />
          </IconButton>
        </Box>
      </Paper>
    </Box>
  );
};

export default ConversationArea; 