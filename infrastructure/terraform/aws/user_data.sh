#!/bin/bash
# SmartChat EC2 User Data Script
# This script automatically sets up SmartChat on new EC2 instances

set -e

# Variables from Terraform
DB_HOST="${db_host}"
DB_NAME="${db_name}"
DB_USERNAME="${db_username}"
DB_PASSWORD="${db_password}"
REDIS_HOST="${redis_host}"
REDIS_AUTH="${redis_auth}"
DOMAIN_NAME="${domain_name}"
ENVIRONMENT="${environment}"

# System configuration
SMARTCHAT_USER="smartchat"
SMARTCHAT_DIR="/opt/smartchat"
LOG_FILE="/var/log/smartchat-setup.log"

# Logging function
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a $LOG_FILE
}

log "Starting SmartChat EC2 instance setup..."

# Update system
log "Updating system packages..."
apt-get update -y
apt-get upgrade -y

# Install required packages
log "Installing required packages..."
apt-get install -y \
    curl \
    wget \
    gnupg2 \
    software-properties-common \
    apt-transport-https \
    ca-certificates \
    lsb-release \
    unzip \
    git \
    htop \
    fail2ban

# Install Docker
log "Installing Docker..."
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
apt-get update -y
apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin

# Enable and start Docker
systemctl enable docker
systemctl start docker

# Install Docker Compose
log "Installing Docker Compose..."
DOCKER_COMPOSE_VERSION=$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep tag_name | cut -d '"' -f 4)
curl -L "https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
chmod +x /usr/local/bin/docker-compose
ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose

# Create smartchat user
log "Creating smartchat user..."
if ! id "$SMARTCHAT_USER" &>/dev/null; then
    useradd -m -s /bin/bash $SMARTCHAT_USER
    usermod -aG docker $SMARTCHAT_USER
    usermod -aG sudo $SMARTCHAT_USER
fi

# Create directories
log "Creating application directories..."
mkdir -p $SMARTCHAT_DIR/{data,logs,backups}
mkdir -p /var/log/smartchat
chown -R $SMARTCHAT_USER:$SMARTCHAT_USER $SMARTCHAT_DIR
chown -R $SMARTCHAT_USER:$SMARTCHAT_USER /var/log/smartchat

# Install AWS CLI
log "Installing AWS CLI..."
curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
unzip awscliv2.zip
./aws/install
rm -rf aws awscliv2.zip

# Clone SmartChat repository
log "Cloning SmartChat repository..."
cd $SMARTCHAT_DIR
if [ ! -d ".git" ]; then
    # Replace with your actual repository URL
    git clone https://github.com/yourusername/smartchat.git .
    chown -R $SMARTCHAT_USER:$SMARTCHAT_USER $SMARTCHAT_DIR
fi

# Create environment file
log "Creating environment configuration..."
cat > $SMARTCHAT_DIR/.env << EOF
# SmartChat Production Environment - Auto-generated by Terraform

# Application Settings
APP_NAME=SmartChat
APP_VERSION=1.0.0
DEBUG=false
ENVIRONMENT=$ENVIRONMENT
HOST=0.0.0.0
PORT=8000
WORKERS=4

# Database Configuration
DATABASE_URL=postgresql://$DB_USERNAME:$DB_PASSWORD@$DB_HOST:5432/$DB_NAME
DATABASE_ECHO=false
DATABASE_POOL_SIZE=10
DATABASE_MAX_OVERFLOW=20

# Redis Configuration
REDIS_URL=redis://:$REDIS_AUTH@$REDIS_HOST:6379
REDIS_PASSWORD=$REDIS_AUTH

# JWT and Security
SECRET_KEY=$(openssl rand -hex 32)
ACCESS_TOKEN_EXPIRE_MINUTES=30

# File Upload Settings
MAX_FILE_SIZE=104857600
UPLOAD_CHUNK_SIZE=5242880
UPLOAD_DIR=uploads
STORAGE_TYPE=s3

# CORS Configuration
CORS_ORIGINS=https://$DOMAIN_NAME,https://www.$DOMAIN_NAME

# Logging
LOG_LEVEL=INFO
LOG_FORMAT=json

# Health Check
HEALTH_CHECK_INTERVAL=30s
HEALTH_CHECK_TIMEOUT=10s
HEALTH_CHECK_RETRIES=3

# Add API keys (these should be set via AWS Secrets Manager or Parameter Store)
# OPENAI_API_KEY=
# ANTHROPIC_API_KEY=
# GOOGLE_API_KEY=
EOF

chown $SMARTCHAT_USER:$SMARTCHAT_USER $SMARTCHAT_DIR/.env
chmod 600 $SMARTCHAT_DIR/.env

# Configure fail2ban
log "Configuring fail2ban..."
cat > /etc/fail2ban/jail.local << EOF
[DEFAULT]
bantime = 3600
findtime = 600
maxretry = 3

[sshd]
enabled = true
port = ssh
logpath = /var/log/auth.log
maxretry = 3

[nginx-http-auth]
enabled = true
port = http,https
logpath = /var/log/nginx/error.log

[nginx-limit-req]
enabled = true
port = http,https
logpath = /var/log/nginx/error.log
maxretry = 10
EOF

systemctl enable fail2ban
systemctl start fail2ban

# Setup log rotation
log "Setting up log rotation..."
cat > /etc/logrotate.d/smartchat << EOF
/var/log/smartchat/*.log {
    daily
    missingok
    rotate 14
    compress
    delaycompress
    notifempty
    create 644 $SMARTCHAT_USER $SMARTCHAT_USER
}

$SMARTCHAT_DIR/logs/*.log {
    daily
    missingok
    rotate 14
    compress
    delaycompress
    notifempty
    create 644 $SMARTCHAT_USER $SMARTCHAT_USER
}
EOF

# Create startup script
log "Creating startup script..."
cat > $SMARTCHAT_DIR/startup.sh << 'EOF'
#!/bin/bash
# SmartChat Startup Script

set -e

SMARTCHAT_DIR="/opt/smartchat"
LOG_FILE="/var/log/smartchat/startup.log"

log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a $LOG_FILE
}

cd $SMARTCHAT_DIR

log "Starting SmartChat application..."

# Pull latest images
log "Pulling latest Docker images..."
docker-compose pull

# Run database migrations
log "Running database migrations..."
docker-compose run --rm backend alembic upgrade head

# Start services
log "Starting services..."
docker-compose up -d

# Wait for services to be ready
log "Waiting for services to start..."
sleep 30

# Health check
log "Performing health check..."
for i in {1..30}; do
    if curl -f -s http://localhost:8000/health > /dev/null; then
        log "Health check passed!"
        break
    fi
    if [ $i -eq 30 ]; then
        log "Health check failed after 30 attempts"
        exit 1
    fi
    sleep 2
done

log "SmartChat started successfully!"
EOF

chmod +x $SMARTCHAT_DIR/startup.sh
chown $SMARTCHAT_USER:$SMARTCHAT_USER $SMARTCHAT_DIR/startup.sh

# Create systemd service
log "Creating systemd service..."
cat > /etc/systemd/system/smartchat.service << EOF
[Unit]
Description=SmartChat Application
Requires=docker.service
After=docker.service

[Service]
Type=oneshot
RemainAfterExit=yes
WorkingDirectory=$SMARTCHAT_DIR
ExecStart=$SMARTCHAT_DIR/startup.sh
ExecStop=/usr/local/bin/docker-compose down
TimeoutStartSec=600
User=$SMARTCHAT_USER
Environment=HOME=$SMARTCHAT_DIR

[Install]
WantedBy=multi-user.target
EOF

# Create backup script
log "Creating backup script..."
cat > $SMARTCHAT_DIR/backup.sh << 'EOF'
#!/bin/bash
# SmartChat Backup Script

set -e

BACKUP_DIR="/opt/smartchat/backups"
RETENTION_DAYS=30
LOG_FILE="/var/log/smartchat/backup.log"
S3_BUCKET="${s3_bucket_name:-}"

log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a $LOG_FILE
}

cd /opt/smartchat

timestamp=$(date +%Y%m%d_%H%M%S)

log "Starting backup process..."

# Database backup
log "Backing up database..."
docker-compose exec -T postgres pg_dump -U smartchat_user smartchat | gzip > "$BACKUP_DIR/db_backup_$timestamp.sql.gz"

# Application files backup
log "Backing up application files..."
tar -czf "$BACKUP_DIR/app_backup_$timestamp.tar.gz" --exclude='backups' --exclude='.git' --exclude='node_modules' .

# Upload to S3 if bucket is configured
if [ -n "$S3_BUCKET" ]; then
    log "Uploading backups to S3..."
    aws s3 cp "$BACKUP_DIR/db_backup_$timestamp.sql.gz" "s3://$S3_BUCKET/backups/"
    aws s3 cp "$BACKUP_DIR/app_backup_$timestamp.tar.gz" "s3://$S3_BUCKET/backups/"
fi

# Cleanup old backups
log "Cleaning up old backups..."
find $BACKUP_DIR -name "*.sql.gz" -mtime +$RETENTION_DAYS -delete
find $BACKUP_DIR -name "*.tar.gz" -mtime +$RETENTION_DAYS -delete

log "Backup completed successfully"
EOF

chmod +x $SMARTCHAT_DIR/backup.sh
chown $SMARTCHAT_USER:$SMARTCHAT_USER $SMARTCHAT_DIR/backup.sh

# Setup cron jobs
log "Setting up cron jobs..."
(sudo -u $SMARTCHAT_USER crontab -l 2>/dev/null; echo "0 2 * * * $SMARTCHAT_DIR/backup.sh") | sudo -u $SMARTCHAT_USER crontab -

# Install CloudWatch agent
log "Installing CloudWatch agent..."
wget https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb
dpkg -i amazon-cloudwatch-agent.deb
rm amazon-cloudwatch-agent.deb

# Configure CloudWatch agent
cat > /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json << EOF
{
    "agent": {
        "metrics_collection_interval": 60,
        "run_as_user": "cwagent"
    },
    "metrics": {
        "namespace": "SmartChat/$ENVIRONMENT",
        "metrics_collected": {
            "cpu": {
                "measurement": [
                    "cpu_usage_idle",
                    "cpu_usage_iowait",
                    "cpu_usage_user",
                    "cpu_usage_system"
                ],
                "metrics_collection_interval": 60
            },
            "disk": {
                "measurement": [
                    "used_percent"
                ],
                "metrics_collection_interval": 60,
                "resources": [
                    "*"
                ]
            },
            "diskio": {
                "measurement": [
                    "io_time"
                ],
                "metrics_collection_interval": 60,
                "resources": [
                    "*"
                ]
            },
            "mem": {
                "measurement": [
                    "mem_used_percent"
                ],
                "metrics_collection_interval": 60
            }
        }
    },
    "logs": {
        "logs_collected": {
            "files": {
                "collect_list": [
                    {
                        "file_path": "/var/log/smartchat/*.log",
                        "log_group_name": "/aws/ec2/smartchat",
                        "log_stream_name": "{instance_id}/application",
                        "timezone": "UTC"
                    },
                    {
                        "file_path": "/var/log/syslog",
                        "log_group_name": "/aws/ec2/smartchat",
                        "log_stream_name": "{instance_id}/syslog",
                        "timezone": "UTC"
                    }
                ]
            }
        }
    }
}
EOF

# System optimization
log "Optimizing system performance..."
cat >> /etc/sysctl.conf << EOF

# SmartChat optimizations
net.core.somaxconn = 65536
net.ipv4.tcp_max_syn_backlog = 65536
net.core.netdev_max_backlog = 5000
net.ipv4.tcp_fin_timeout = 30
net.ipv4.tcp_keepalive_time = 120
net.ipv4.tcp_keepalive_probes = 3
net.ipv4.tcp_keepalive_intvl = 15
vm.swappiness = 10
fs.file-max = 65536
EOF

sysctl -p

# Configure limits
cat >> /etc/security/limits.conf << EOF
$SMARTCHAT_USER soft nofile 65536
$SMARTCHAT_USER hard nofile 65536
$SMARTCHAT_USER soft nproc 32768
$SMARTCHAT_USER hard nproc 32768
EOF

# Enable services
log "Enabling services..."
systemctl daemon-reload
systemctl enable smartchat.service

# Start CloudWatch agent
systemctl enable amazon-cloudwatch-agent
systemctl start amazon-cloudwatch-agent

# Build and start SmartChat
log "Building and starting SmartChat..."
cd $SMARTCHAT_DIR
sudo -u $SMARTCHAT_USER docker-compose build
sudo -u $SMARTCHAT_USER $SMARTCHAT_DIR/startup.sh

# Signal completion
log "SmartChat EC2 setup completed successfully!"

# Send success signal to CloudFormation/Terraform if needed
# This can be used with Auto Scaling Groups to know when instance is ready
touch /tmp/smartchat-setup-complete

log "Instance is ready for production traffic!" 